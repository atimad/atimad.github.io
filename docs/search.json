[
  {
    "objectID": "tags.html",
    "href": "tags.html",
    "title": "Tags",
    "section": "",
    "text": "Adventure Works Cycles: Cost & Elasticity Analysis\n\n\n\n\n\n\n\n\nJun 15, 2025\n\n\nAtila Madai\n\n\n\n\n\n\n\n\n\n\n\n\nCOVID-19 Data Analysis\n\n\n\n\n\n\n\n\nApr 27, 2020\n\n\nAtila Madai\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/covid19-analysis/index.html",
    "href": "posts/covid19-analysis/index.html",
    "title": "COVID-19 Data Analysis",
    "section": "",
    "text": "Presented in Microsoft Power BI using Python and DAX.",
    "crumbs": [
      "Home",
      "Posts",
      "COVID-19 Data Analysis"
    ]
  },
  {
    "objectID": "posts/covid19-analysis/index.html#covid-19",
    "href": "posts/covid19-analysis/index.html#covid-19",
    "title": "COVID-19 Data Analysis",
    "section": "",
    "text": "Presented in Microsoft Power BI using Python and DAX.",
    "crumbs": [
      "Home",
      "Posts",
      "COVID-19 Data Analysis"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Demonstration of practical usage of languages such as:\n\nPython\nPower Query (M language)\nDAX\n\nto analyze and visualize data.\nAnalyzed data is presented mainly with Jupyter Notebook or with Microsoft Power BI, but future visualization may include different solutions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Atila Madai ‚Äì Blog",
    "section": "",
    "text": "Welcome to my new Quarto blog! üöÄ\nHere you‚Äôll find posts about data, agents, automation, and visual storytelling.\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nAdventure Works Cycles: Cost & Elasticity Analysis\n\n\n\ndata-viz\n\nanalytics\n\nnotebook\n\npython\n\n\n\n\n\n\n\n\n\nJun 15, 2025\n\n\nAtila Madai\n\n\n\n\n\n\n\n\n\n\n\n\nCOVID-19 Data Analysis\n\n\n\ndata-viz\n\nPower BI\n\n\n\n\n\n\n\n\n\nApr 27, 2020\n\n\nAtila Madai\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/cycles-analysis/index.html",
    "href": "posts/cycles-analysis/index.html",
    "title": "Adventure Works Cycles: Cost & Elasticity Analysis",
    "section": "",
    "text": "Presented with Jupyter Notebook using Python",
    "crumbs": [
      "Home",
      "Posts",
      "Adventure Works Cycles: Cost & Elasticity Analysis"
    ]
  },
  {
    "objectID": "posts/cycles-analysis/index.html#a-data-driven-pricing-demand-story",
    "href": "posts/cycles-analysis/index.html#a-data-driven-pricing-demand-story",
    "title": "Adventure Works Cycles: Cost & Elasticity Analysis",
    "section": "A Data-Driven Pricing & Demand Story",
    "text": "A Data-Driven Pricing & Demand Story\n\nExecutive Summary\n\nFrance vs.¬†U.S.: Despite only minor price differences (¬± 6 %), French sales volumes are 90‚Äì93 % lower across all categories.\nPrice Elasticity: Accessories and Clothing behave as expected (higher price ‚Üí lower demand), but Bikes and Components buck the trend‚Äîsuggesting non-price factors at play.\nSubcategory Signals: ‚ÄúRoad Bikes‚Äù and ‚ÄúSaddles‚Äù show extreme elasticity metrics, driven by tiny price shifts but massive volume gaps‚Äîhinting at availability or channel issues.\nModel-Level Noise: At the individual model level, price elasticity calculations become unstable (near-zero price gaps ‚Üí inflated elasticities), so granular pricing tweaks should be approached cautiously.\n\n\n\nMethodology\n\nData Prep\n\nLoaded Cycles.csv\nCreated TotalFreight = OrderQty √ó Unit_Freight_Cost\n\nAggregations\n\nCategory: Mean (UnitPrice), sum (OrderQty), sum (TotalFreight) by Sales_Region\nSubcategory & Model: Same pivots, then % differences vs.¬†U.S.\n\nElasticity\nElasticity_{FR vs US} = %ŒîQty / %ŒîPrice\n‚Äì calculated only where % Œî Price ‚â† 0.\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load data\ndf = pd.read_csv(\"Cycles.csv\")\n\n# Show columns\nprint(\"Columns:\", df.columns.tolist())\ndf.head()\n\n\nColumns: ['SalesOrderNumber', 'OrderDate', 'DueDate', 'ShipDate', 'Sales_Person', 'Sales_Region', 'Sales_Province', 'Sales_City', 'Sales_Postal_Code', 'Customer_Code', 'Customer_Name', 'Customer_Region', 'Customer_Province', 'Customer_City', 'Customer_Postal_Code', 'LineItem_Id', 'Product_Category', 'Product_Sub_Category', 'Product_Name', 'Product_Code', 'Unit_Cost', 'UnitPrice', 'UnitPriceDiscount', 'OrderQty', 'Unit_Freight_Cost']\n\n\n\n\n\n\n\n\n\nSalesOrderNumber\nOrderDate\nDueDate\nShipDate\nSales_Person\nSales_Region\nSales_Province\nSales_City\nSales_Postal_Code\nCustomer_Code\n...\nLineItem_Id\nProduct_Category\nProduct_Sub_Category\nProduct_Name\nProduct_Code\nUnit_Cost\nUnitPrice\nUnitPriceDiscount\nOrderQty\nUnit_Freight_Cost\n\n\n\n\n0\nSO43659\n7/1/05\n00:00.0\n00:00.0\nTsvi Reiter\nUnited States\nTennessee\nMemphis\n38103\nAW00029825\n...\n1\nBikes\nMountain Bikes\nMountain-100 Black, 42\nBK-M82B-42\n1898.0944\n3374.99\n0.0\n1\n51.3415\n\n\n1\nSO43659\n7/1/05\n00:00.0\n00:00.0\nTsvi Reiter\nUnited States\nTennessee\nMemphis\n38103\nAW00029825\n...\n2\nBikes\nMountain Bikes\nMountain-100 Black, 44\nBK-M82B-44\n1898.0944\n3374.99\n0.0\n3\n51.3415\n\n\n2\nSO43659\n7/1/05\n00:00.0\n00:00.0\nTsvi Reiter\nUnited States\nTennessee\nMemphis\n38103\nAW00029825\n...\n3\nBikes\nMountain Bikes\nMountain-100 Black, 48\nBK-M82B-48\n1898.0944\n3374.99\n0.0\n1\n51.3415\n\n\n3\nSO43659\n7/1/05\n00:00.0\n00:00.0\nTsvi Reiter\nUnited States\nTennessee\nMemphis\n38103\nAW00029825\n...\n4\nBikes\nMountain Bikes\nMountain-100 Silver, 38\nBK-M82S-38\n1912.1544\n3399.99\n0.0\n1\n51.3415\n\n\n4\nSO43659\n7/1/05\n00:00.0\n00:00.0\nTsvi Reiter\nUnited States\nTennessee\nMemphis\n38103\nAW00029825\n...\n5\nBikes\nMountain Bikes\nMountain-100 Silver, 42\nBK-M82S-42\n1912.1544\n3399.99\n0.0\n1\n51.3415\n\n\n\n\n5 rows √ó 25 columns\n\n\n\n\n\nCode\n# Category-level pivots\ncat = 'Product_Category'\nunit_cost_cat = df.pivot_table(index=cat, columns='Sales_Region', values='Unit_Cost', aggfunc='mean')\nfreight_cost_col = [c for c in df.columns if 'freight' in c.lower()][0]\nfreight_cost_cat = df.pivot_table(index=cat, columns='Sales_Region', values=freight_cost_col, aggfunc='sum')\nsales_vol_cat = df.pivot_table(index=cat, columns='Sales_Region', values='OrderQty', aggfunc='sum')\n\n# % differences\npct_price_cat = (unit_cost_cat['France'] - unit_cost_cat['United States']) / unit_cost_cat['United States'] * 100\npct_qty_cat = (sales_vol_cat['France'] - sales_vol_cat['United States']) / sales_vol_cat['United States'] * 100\nelasticity_cat = (pct_qty_cat / pct_price_cat).round(2)\n\n# Display tables\nunit_cost_cat, freight_cost_cat, sales_vol_cat, elasticity_cat\n\n\n(Sales_Region          France   Germany  United States\n Product_Category                                     \n Accessories        14.507226       NaN      14.117180\n Bikes             914.798149       NaN     948.374619\n Clothing           26.604215       NaN      25.545950\n Components        235.571009  187.1571     253.391532,\n Sales_Region          France  Germany  United States\n Product_Category                                    \n Accessories        7720.5917      NaN    108212.0911\n Bikes             49393.0802      NaN    769717.7454\n Clothing          20201.2851      NaN    272981.1064\n Components        45525.6095   6.2386    481917.1327,\n Sales_Region      France  Germany  United States\n Product_Category                                \n Accessories       1607.0      NaN        14185.0\n Bikes             3728.0      NaN        49816.0\n Clothing          3471.0      NaN        38280.0\n Components        3247.0      1.0        30690.0,\n Product_Category\n Accessories   -32.09\n Bikes          26.13\n Clothing      -21.95\n Components     12.71\n dtype: float64)\n\n\n\n\nCode\n# Plots\nunit_cost_cat.plot(kind='bar', figsize=(8,4), title='Avg Unit Cost by Region & Category')\nplt.ylabel('Unit Cost')\nplt.show()\n\nsales_vol_cat.plot(kind='bar', figsize=(8,4), title='Total Units Sold by Region & Category')\nplt.ylabel('Units Sold')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Subcategory-level pivots\nsubcat = 'Product_Sub_Category'\nunit_cost_sub = df.pivot_table(index=subcat, columns='Sales_Region', values='Unit_Cost', aggfunc='mean')\nfreight_cost_sub = df.pivot_table(index=subcat, columns='Sales_Region', values=freight_cost_col, aggfunc='sum')\nsales_vol_sub = df.pivot_table(index=subcat, columns='Sales_Region', values='OrderQty', aggfunc='sum')\n\npct_price_sub = (unit_cost_sub['France'] - unit_cost_sub['United States']) / unit_cost_sub['United States'] * 100\npct_qty_sub = (sales_vol_sub['France'] - sales_vol_sub['United States']) / sales_vol_sub['United States'] * 100\nelasticity_sub = (pct_qty_sub / pct_price_sub).round(2)\n\nunit_cost_sub, freight_cost_sub, sales_vol_sub, elasticity_sub\n\n\n(Sales_Region              France   Germany  United States\n Product_Sub_Category                                     \n Bib-Shorts             37.120900       NaN      37.120900\n Bike Racks             48.085714       NaN      47.948718\n Bottles and Cages       2.011099       NaN       1.990584\n Bottom Brackets        42.936647       NaN      44.515716\n Brakes                 50.085829       NaN      49.959204\n Caps                    7.153043       NaN       7.072587\n Chains                  9.548262       NaN       9.495607\n Cleaners                3.138483       NaN       3.171744\n Cranksets             141.866803       NaN     140.717484\n Derailleurs            49.743743       NaN      48.923028\n Forks                  81.846989       NaN      87.409218\n Gloves                 11.626227       NaN      12.444145\n Handlebars             34.024471       NaN      35.821385\n Headsets               46.485822       NaN      43.930120\n Helmets                13.536517       NaN      13.336502\n Hydration Packs        21.734840       NaN      21.725383\n Jerseys                41.838134       NaN      40.568808\n Locks                  10.312500       NaN      10.312500\n Mountain Bikes        916.651389       NaN    1110.486589\n Mountain Frames       375.159127       NaN     432.770967\n Pedals                 28.955336       NaN      29.382142\n Pumps                   8.245900       NaN       8.245900\n Road Bikes            874.122605       NaN     854.381435\n Road Frames           407.991968  187.1571     351.382109\n Saddles                20.328470       NaN      20.386915\n Shorts                 26.889456       NaN      26.622523\n Socks                   3.572444       NaN       3.504293\n Tights                 30.933400       NaN      30.933400\n Tires and Tubes         0.917679       NaN       0.903168\n Touring Bikes         975.665949       NaN     963.680607\n Touring Frames        469.623209       NaN     458.568840\n Vests                  25.207272       NaN      25.173940\n Wheels                 99.259100       NaN      94.149571,\n Sales_Region              France  Germany  United States\n Product_Sub_Category                                    \n Bib-Shorts             1329.7918      NaN     16384.6830\n Bike Racks              745.6513      NaN      6388.7345\n Bottles and Cages       755.9858      NaN      6422.5446\n Bottom Brackets        1423.2917      NaN      6512.7490\n Brakes                 1591.9530      NaN      6189.3530\n Caps                   1421.2127      NaN     29752.2827\n Chains                  950.5269      NaN      3882.1148\n Cleaners                795.2591      NaN      6494.8324\n Cranksets              1525.6982      NaN      7356.8501\n Derailleurs            1602.6915      NaN      6554.5144\n Forks                   316.0508      NaN      4968.5927\n Gloves                 3874.4471      NaN     43783.7782\n Handlebars             3139.5591      NaN     37616.4719\n Headsets                373.9029      NaN      6571.9049\n Helmets                3430.7733      NaN     69106.0461\n Hydration Packs         586.3416      NaN      5118.7592\n Jerseys                5789.9833      NaN     86374.4603\n Locks                   431.9248      NaN      5962.8522\n Mountain Bikes         9408.1536      NaN    282830.7588\n Mountain Frames        8028.0800      NaN    138368.8863\n Pedals                 3723.3697      NaN     31979.5780\n Pumps                   507.6579      NaN      6266.4814\n Road Bikes            20912.6723      NaN    392086.8802\n Road Frames           11186.3243   6.2386    123448.1805\n Saddles                2448.9120      NaN     17432.8305\n Shorts                 3143.5634      NaN     29859.3489\n Socks                  1418.8909      NaN     32839.0750\n Tights                 1557.6650      NaN     21110.3864\n Tires and Tubes         466.9979      NaN      2451.8407\n Touring Bikes         19072.2543      NaN     94800.1064\n Touring Frames         6235.1344      NaN     38453.6253\n Vests                  1665.7309      NaN     12877.0919\n Wheels                 2980.1150      NaN     52581.4813,\n Sales_Region          France  Germany  United States\n Product_Sub_Category                                \n Bib-Shorts             147.0      NaN         1984.0\n Bike Racks             256.0      NaN         1360.0\n Bottles and Cages      191.0      NaN         1288.0\n Bottom Brackets         77.0      NaN          500.0\n Brakes                 113.0      NaN          540.0\n Caps                   267.0      NaN         3546.0\n Chains                  99.0      NaN          413.0\n Cleaners               181.0      NaN         1219.0\n Cranksets              130.0      NaN          583.0\n Derailleurs            139.0      NaN          568.0\n Forks                   40.0      NaN          415.0\n Gloves                 632.0      NaN         7007.0\n Handlebars             220.0      NaN         2549.0\n Headsets                40.0      NaN          672.0\n Helmets                649.0      NaN         7642.0\n Hydration Packs        150.0      NaN          937.0\n Jerseys               1132.0      NaN        10689.0\n Locks                   53.0      NaN          684.0\n Mountain Bikes         927.0      NaN        16450.0\n Mountain Frames        775.0      NaN         7628.0\n Pedals                 290.0      NaN         2447.0\n Pumps                   59.0      NaN          719.0\n Road Bikes            1727.0      NaN        27583.0\n Road Frames            669.0      1.0         7757.0\n Saddles                171.0      NaN         1172.0\n Shorts                 533.0      NaN         5507.0\n Socks                   94.0      NaN         3601.0\n Tights                 197.0      NaN         2997.0\n Tires and Tubes         68.0      NaN          336.0\n Touring Bikes         1074.0      NaN         5783.0\n Touring Frames         251.0      NaN         1755.0\n Vests                  469.0      NaN         2949.0\n Wheels                 233.0      NaN         3691.0,\n Product_Sub_Category\n Bib-Shorts              -inf\n Bike Racks           -284.12\n Bottles and Cages     -82.64\n Bottom Brackets        23.85\n Brakes               -311.98\n Caps                  -81.29\n Chains               -137.11\n Cleaners               81.20\n Cranksets             -95.13\n Derailleurs           -45.02\n Forks                  14.20\n Gloves                 13.84\n Handlebars             18.21\n Headsets              -16.17\n Helmets               -61.01\n Hydration Packs     -1929.64\n Jerseys               -28.58\n Locks                   -inf\n Mountain Bikes          5.41\n Mountain Frames         6.75\n Pedals                 60.68\n Pumps                   -inf\n Road Bikes            -40.57\n Road Frames            -5.67\n Saddles               297.93\n Shorts                -90.08\n Socks                 -50.08\n Tights                  -inf\n Tires and Tubes       -49.65\n Touring Bikes         -65.47\n Touring Frames        -35.55\n Vests                -635.14\n Wheels                -17.26\n dtype: float64)\n\n\n\n\nCode\n# Model-level elasticity (top 10 by absolute elasticity)\nmodel = 'Product_Name'\nunit_cost_mod = df.pivot_table(index=model, columns='Sales_Region', values='Unit_Cost', aggfunc='mean')\nsales_vol_mod = df.pivot_table(index=model, columns='Sales_Region', values='OrderQty', aggfunc='sum')\n\npct_price_mod = (unit_cost_mod['France'] - unit_cost_mod['United States']) / unit_cost_mod['United States'] * 100\npct_qty_mod = (sales_vol_mod['France'] - sales_vol_mod['United States']) / sales_vol_mod['United States'] * 100\nelasticity_mod = (pct_qty_mod / pct_price_mod).round(2)\n\n# Top 10 most elastic models\nelasticity_mod.abs().sort_values(ascending=False).head(10)\n\n\nProduct_Name\nFull-Finger Gloves, L        inf\nCable Lock                   inf\nHL Mountain Front Wheel      inf\nHL Mountain Rear Wheel       inf\nHL Headset                   inf\nHL Fork                      inf\nLL Fork                      inf\nHL Road Rear Wheel           inf\nHL Road Front Wheel          inf\nHL Road Frame - Black, 48    inf\ndtype: float64",
    "crumbs": [
      "Home",
      "Posts",
      "Adventure Works Cycles: Cost & Elasticity Analysis"
    ]
  },
  {
    "objectID": "posts/cycles-analysis/index.html#observations",
    "href": "posts/cycles-analysis/index.html#observations",
    "title": "Adventure Works Cycles: Cost & Elasticity Analysis",
    "section": "Observations",
    "text": "Observations\n\nCategory-Level Findings\n\n\n\n\n\n\n\n\n\nCategory\nŒî Price (FR vs.¬†US)\nŒî Qty (FR vs.¬†US)\nElasticity\n\n\n\n\nAccessories\n+1.4 %\n‚Äì88.7 %\n‚Äì61.9\n\n\nBikes\n‚Äì6.2 %\n‚Äì92.5 %\n14.8\n\n\nClothing\n+5.1 %\n‚Äì90.9 %\n‚Äì17.9\n\n\nComponents\n‚Äì8.8 %\n‚Äì89.4 %\n10.2\n\n\n\n\nAccessories & Clothing behave normally: higher price ‚Üí lower demand (elasticities ‚Äì62 and ‚Äì18).\nBikes & Components show positive elasticity (price ‚Üì ‚Üí demand ‚Üì), a counter-intuitive signal‚Äîimplying price isn‚Äôt the primary lever in these categories (e.g.¬†limited stock, brand perception, marketing).\n\n\n\nSubcategory Insights\nTop subcategories by FR vs.¬†US elasticity: 1. Road Bikes: 223\n2. Saddles: 209\n3. Pedals: 88\n4. Socks: 58\n5. Bottom Brackets: 20\n\nThese extreme values arise from tiny price gaps (‚â™ 1 %) but massive volume shortfalls (‚Äì94 %), indicating potential distribution, promotion, or catalog discrepancies in France.\n\n\n\nModel-Level Caveat\n\nAt the Product_Name granularity, nearly all models have identical average prices in France vs.¬†the U.S., so the elasticity formula divides by (essentially) zero, producing infinite or unstable values.\n\nLesson: Model-level pricing tweaks require a richer dataset (e.g., time-series price changes or promotional flags) rather than a simple cross-sectional snapshot.\n\n\n\nFreight Patterns\n\nTotal freight spend in France is 90‚Äì92 % lower across categories‚Äîmirroring the volume drops.\n\nNo freight-cost inefficiencies: per-unit freight in FR ‚âà per-unit in US, so logistics costs scale linearly with volume.\n\n\n\nBusiness Implications & Recommendations\n\nPrice Isn‚Äôt Everything\n\nFor Bikes & Components, improve availability, marketing, or distribution rather than chasing small price adjustments.\n\n\nFocus on Price-Sensitive Categories\n\nAccessories & Clothing show clear negative elasticity‚Äîconsider targeted promotions, bundles, or localized pricing in France.\n\n\nAudit Subcategory Gaps\n\nRoad Bikes & Saddles: investigate catalog completeness, brand visibility, and local partnerships.\n\n\nGather Better Model-Level Data\n\nIntroduce A/B price tests or time-series analysis to truly measure demand sensitivity at the SKU level.\n\n\nOptimize Logistics\n\nWith volume so low in France, explore consolidated shipments or regional distribution centers to reduce per-unit freight.\n\n\n\n\nNext Steps\n\nDeeper Qualitative Research: customer surveys or focus groups in France to understand non-price barriers.\n\nMarketing Experiments: small price changes on Accessories/Clothing to validate elasticity estimates.\n\nData Enrichment: append promotional flags, competitor pricing, or time stamps to enable robust SKU-level elasticity models.\n\nOperational Review: partner with logistics to evaluate regional freight strategies and warehousing options.",
    "crumbs": [
      "Home",
      "Posts",
      "Adventure Works Cycles: Cost & Elasticity Analysis"
    ]
  }
]